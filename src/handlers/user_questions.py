from telebot import types
from src.database.repositories.user import UserRepository
from src.database.repositories.user_question import UserQuestionRepository
from src.config import settings
from src.database.database import get_session
from src.schemas.user import UserBase
from src.schemas.user_question import UserQuestionBase
import logging
from email_validator import validate_email, EmailNotValidError
from src.handlers.keyboards import get_main_menu


logger = logging.getLogger(__name__)
user_data = {}

def register_user_question_handlers(bot):

    @bot.message_handler(func=lambda m: m.text == "–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å")
    def ask_question(message):
        msg = bot.send_message(
            message.chat.id, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. (–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)"
        )
        bot.register_next_step_handler(msg, process_question_text)
        user_data[message.chat.id] = {"state": "awaiting_question"}

    def process_question_text(message):
        user_data[message.chat.id]["question"] = message.text
        msg = bot.send_message(message.chat.id, "üìß –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à email –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:")
        bot.register_next_step_handler(msg, process_email)

    def process_email(message):
        email = message.text.strip()

        try:
            valid = validate_email(email)
            email = valid.email
        except EmailNotValidError:
            msg = bot.send_message(
                message.chat.id,
                "‚ùå Email –≤–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            bot.register_next_step_handler(msg, process_email)
            return

        user_data[message.chat.id]["email"] = message.text

        repo = UserRepository(next(get_session()))
        user = repo.create_or_update(
            UserBase.model_construct(
                telegram_chat_id=message.chat.id,
                telegram_username=bot.get_chat(message.chat.id).username,
                email=message.text,
            )
        )

        sent = True
        try:
            send_question_to_fund(message.chat.id)
        except Exception as error:
            logger.error(error)
            sent = False

        repo = UserQuestionRepository(next(get_session()))
        repo.create(
            UserQuestionBase.model_construct(
                question_text=user_data[message.chat.id]["question"],
                sent=sent,
                user_id=user.id,
            )
        )

        bot.send_message(
            message.chat.id,
            "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ñ–æ–Ω–¥. –°–ø–∞—Å–∏–±–æ!",
            reply_markup=get_main_menu(),
        )

    def send_question_to_fund(chat_id):
        data = user_data.get(chat_id, {})
        question = data.get("question", "–ù–µ —É–∫–∞–∑–∞–Ω")
        email = data.get("email", "–ù–µ —É–∫–∞–∑–∞–Ω")
        user = bot.get_chat(chat_id)

        bot.send_message(
            settings.RESEND_CHAT_ID,
            f"‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"–ò–º—è: {user.first_name}\n"
            f"Username: @{user.username}\n"
            f"Email: {email}\n\n"
            f"–í–æ–ø—Ä–æ—Å: {question}",
        )
