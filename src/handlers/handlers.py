from telebot import types

from src.config import Settings


def setup_handlers(bot):
    settings = Settings()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    questions_button = types.KeyboardButton("–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
    special_question_button = types.KeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å")
    donate_button = types.KeyboardButton("–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –≤ —Ñ–æ–Ω–¥")
    markup.add(questions_button)
    markup.add(special_question_button)
    markup.add(donate_button)

    @bot.message_handler(commands=["start"])
    def start_message(message):
        print(message.chat.id)
        bot.send_message(
            message.chat.id,
            text="–ü—Ä–∏–≤–µ—Ç, {0.first_name} üëã\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏".format(
                message.from_user
            ),
            reply_markup=markup,
        )

    @bot.message_handler(content_types=["text"])
    def text_messages(message):

        if message.text == "–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã":
            show_questions_menu(message)

        elif message.text == "–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å":
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")

        elif message.text == "–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –≤ —Ñ–æ–Ω–¥":
            bot.send_message(
                message.chat.id,
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–º–æ—á—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è: [—Å—Å—ã–ª–∫–∞].",
            )

        else:
            bot.send_message(
                settings.RESEND_CHAT_ID,
                f"–í–æ–ø—Ä–æ—Å –æ—Ç {message.from_user.first_name} (@{message.from_user.username}): {message.text}",
            )
            bot.send_message(
                message.chat.id, "–í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ–∑–∂–µ."
            )

    def show_questions_menu(message):
        keyboard = types.InlineKeyboardMarkup()

        question_one = types.InlineKeyboardButton(
            text="üß¨ –î–æ–Ω–æ—Ä—Å—Ç–≤–æ –∫–æ—Å—Ç–Ω–æ–≥–æ –º–æ–∑–≥–∞", callback_data="question_1"
        )

        question_two = types.InlineKeyboardButton(
            text="ü©∏ –î–æ–Ω–æ—Ä—Å—Ç–≤–æ –∫—Ä–æ–≤–∏", callback_data="question_2"
        )

        question_three = types.InlineKeyboardButton(
            text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã —Ñ–æ–Ω–¥–∞", callback_data="question_3"
        )
        

        keyboard.row(question_one)
        keyboard.row(question_two)
        keyboard.row(question_three)

        bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)

    @bot.callback_query_handler(func=lambda call: True)
    def callback_query(call):

        if call.data == "question_1":
            markup = types.InlineKeyboardMarkup()

            btn1 = types.InlineKeyboardButton(
                "–í–æ–ø—Ä–æ—Å 1 –ø–æ —Ç–µ–º–µ", callback_data="option1"
            )

            btn2 = types.InlineKeyboardButton(
                "–í–æ–ø—Ä–æ—Å 2 –ø–æ —Ç–µ–º–µ", callback_data="option2"
            )

            back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="option3")

            markup.add(btn1)
            markup.add(btn2)
            markup.add(back)

            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üß¨ –î–æ–Ω–æ—Ä—Å—Ç–≤–æ –∫–æ—Å—Ç–Ω–æ–≥–æ –º–æ–∑–≥–∞:",
                reply_markup=markup,
            )
            bot.answer_callback_query(call.id)

        elif call.data == "option3":
            show_questions_menu(call.message)
            bot.answer_callback_query(call.id)





        elif call.data == "question_2":
            markup = types.InlineKeyboardMarkup()

            btn1 = types.InlineKeyboardButton(
                "–í–æ–ø—Ä–æ—Å 1 –ø–æ —Ç–µ–º–µ", callback_data="option1"
            )

            btn2 = types.InlineKeyboardButton(
                "–í–æ–ø—Ä–æ—Å 2 –ø–æ —Ç–µ–º–µ", callback_data="option2"
            )

            back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="option3")

            markup.add(btn1)
            markup.add(btn2)
            markup.add(back)

            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="ü©∏ –î–æ–Ω–æ—Ä—Å—Ç–≤–æ –∫—Ä–æ–≤–∏:",
                reply_markup=markup,
            )
            bot.answer_callback_query(call.id)
        
        elif call.data == "option3":
            show_questions_menu(call.message)
            bot.answer_callback_query(call.id)





        elif call.data == "question_3":

            markup = types.InlineKeyboardMarkup()
            btn1 = types.InlineKeyboardButton(
                "–ì–¥–µ —Å–¥–∞–≤–∞—Ç—å –∫—Ä–æ–≤—å –≤ –ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ ", callback_data="option_1"
            )

            btn2 = types.InlineKeyboardButton(
                "–°–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–µ–Ω–∏–π –ø–µ—Ä–µ–ª–∏–≤–∞–Ω–∏—è –∫—Ä–æ–≤–∏", callback_data="option_2"
            )

            btn3 = types.InlineKeyboardButton(
                "–ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Ç–µ–ª–µ—Ñ–æ–Ω —Ñ–æ–Ω–¥–∞", callback_data="option_3"
            )

            back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="option_4")

            markup.add(btn1)
            markup.add(btn2)
            markup.add(btn3)
            markup.add(back)

            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã —Ñ–æ–Ω–¥–∞:",
                reply_markup=markup,
            )
            bot.answer_callback_query(call.id)




        elif call.data == "option_1":
            markup = types.InlineKeyboardMarkup()
            back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="question_3")
            markup.add(back)
    
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üè• –í–æ—Ç –≥–¥–µ –º–æ–∂–Ω–æ —Å–¥–∞–≤–∞—Ç—å –∫—Ä–æ–≤—å –≤ –ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ:\n\n"
                "1. ///////////////////\n"
                "2. ///////////////////\n"
                "3. ///////////////////////\n"
                "4. /////////////////////////",
                reply_markup=markup,
            )
            bot.answer_callback_query(call.id)

        elif call.data == "option_2":
            markup = types.InlineKeyboardMarkup()
            back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="question_3")
            markup.add(back)
            
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üè•ÔøΩ –°–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–µ–Ω–∏–π –ø–µ—Ä–µ–ª–∏–≤–∞–Ω–∏—è –∫—Ä–æ–≤–∏:\n\n"
                    "1. ////////////\n"
                    "2. /////////////\n"
                    "3. /////////////////////\n\n",
                reply_markup=markup,
            )
            bot.answer_callback_query(call.id)

        elif call.data == "option_3":
            markup = types.InlineKeyboardMarkup()
            back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="question_3")
            markup.add(back)
            
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ñ–æ–Ω–¥–∞:\n\n"
                    "–¢–µ–ª–µ—Ñ–æ–Ω: //////////////\n"
                    "Email: ///////////////\n"
                    "–ê–¥—Ä–µ—Å: //////////////////\n"
                    "–°–∞–π—Ç: ///////////////////",
                reply_markup=markup,
            )
            bot.answer_callback_query(call.id) 

        elif call.data == "option_4":
            show_questions_menu(call.message)
            bot.answer_callback_query(call.id)
